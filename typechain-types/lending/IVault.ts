/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface IVaultInterface extends utils.Interface {
  functions: {
    "claim_erc20(address,uint256)": FunctionFragment;
    "decrease_liability(uint256)": FunctionFragment;
    "deposit_erc20(address,uint256)": FunctionFragment;
    "getBalances(address)": FunctionFragment;
    "getBaseLiability()": FunctionFragment;
    "getMinter()": FunctionFragment;
    "increase_liability(uint256)": FunctionFragment;
    "masterTransfer(address,address,uint256)": FunctionFragment;
    "withdraw_erc20(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claim_erc20"
      | "decrease_liability"
      | "deposit_erc20"
      | "getBalances"
      | "getBaseLiability"
      | "getMinter"
      | "increase_liability"
      | "masterTransfer"
      | "withdraw_erc20"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claim_erc20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decrease_liability",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit_erc20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getBalances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getBaseLiability",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getMinter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increase_liability",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "masterTransfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw_erc20",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claim_erc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decrease_liability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit_erc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseLiability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMinter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increase_liability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "masterTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw_erc20",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IVault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claim_erc20(
      token_address: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    decrease_liability(
      base_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit_erc20(
      token_address: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBalances(arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getBaseLiability(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMinter(overrides?: CallOverrides): Promise<[string]>;

    increase_liability(
      base_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    masterTransfer(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw_erc20(
      token_address: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  claim_erc20(
    token_address: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  decrease_liability(
    base_amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit_erc20(
    token_address: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBalances(arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  getBaseLiability(overrides?: CallOverrides): Promise<BigNumber>;

  getMinter(overrides?: CallOverrides): Promise<string>;

  increase_liability(
    base_amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  masterTransfer(
    _token: string,
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw_erc20(
    token_address: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claim_erc20(
      token_address: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decrease_liability(
      base_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit_erc20(
      token_address: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalances(arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    getBaseLiability(overrides?: CallOverrides): Promise<BigNumber>;

    getMinter(overrides?: CallOverrides): Promise<string>;

    increase_liability(
      base_amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    masterTransfer(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw_erc20(
      token_address: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    claim_erc20(
      token_address: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    decrease_liability(
      base_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit_erc20(
      token_address: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBalances(arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    getBaseLiability(overrides?: CallOverrides): Promise<BigNumber>;

    getMinter(overrides?: CallOverrides): Promise<BigNumber>;

    increase_liability(
      base_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    masterTransfer(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw_erc20(
      token_address: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claim_erc20(
      token_address: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    decrease_liability(
      base_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit_erc20(
      token_address: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBalances(
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBaseLiability(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMinter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increase_liability(
      base_amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    masterTransfer(
      _token: string,
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw_erc20(
      token_address: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
