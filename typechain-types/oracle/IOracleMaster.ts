/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface IOracleMasterInterface extends utils.Interface {
  functions: {
    "get_live_price(address)": FunctionFragment;
    "pause_relay(address,bool)": FunctionFragment;
    "set_relay(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "get_live_price" | "pause_relay" | "set_relay"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "get_live_price",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "pause_relay",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "set_relay",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "get_live_price",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pause_relay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set_relay", data: BytesLike): Result;

  events: {};
}

export interface IOracleMaster extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOracleMasterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    get_live_price(
      token_address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pause_relay(
      token_address: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    set_relay(
      token_address: string,
      relay_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  get_live_price(
    token_address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pause_relay(
    token_address: string,
    state: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  set_relay(
    token_address: string,
    relay_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    get_live_price(
      token_address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause_relay(
      token_address: string,
      state: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    set_relay(
      token_address: string,
      relay_address: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    get_live_price(
      token_address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause_relay(
      token_address: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    set_relay(
      token_address: string,
      relay_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    get_live_price(
      token_address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause_relay(
      token_address: string,
      state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    set_relay(
      token_address: string,
      relay_address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
