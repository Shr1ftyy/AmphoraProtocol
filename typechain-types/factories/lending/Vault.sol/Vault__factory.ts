/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Vault, VaultInterface } from "../../../lending/Vault.sol/Vault";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "minter",
        type: "address",
      },
      {
        internalType: "address",
        name: "master_address",
        type: "address",
      },
      {
        internalType: "address",
        name: "usdi_address",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token_address",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token_address",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    inputs: [],
    name: "BaseLiability",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_baseLiability",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_id",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_masterAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_minter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "base_amount",
        type: "uint256",
      },
    ],
    name: "decrease_liability",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "compLikeDelegatee",
        type: "address",
      },
      {
        internalType: "address",
        name: "CompLikeToken",
        type: "address",
      },
    ],
    name: "delegateCompLikeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMinter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "base_amount",
        type: "uint256",
      },
    ],
    name: "increase_liability",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "masterTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token_address",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw_erc20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200112e3803806200112e833981810160405281019062000037919062000232565b8360008190555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050620002a4565b600080fd5b6000819050919050565b620001a78162000192565b8114620001b357600080fd5b50565b600081519050620001c7816200019c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001fa82620001cd565b9050919050565b6200020c81620001ed565b81146200021857600080fd5b50565b6000815190506200022c8162000201565b92915050565b600080600080608085870312156200024f576200024e6200018d565b5b60006200025f87828801620001b6565b945050602062000272878288016200021b565b935050604062000285878288016200021b565b925050606062000298878288016200021b565b91505092959194509250565b610e7a80620002b46000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063c84aae1711610071578063c84aae1714610167578063da7eeea514610197578063dafb27b6146101c7578063e8179577146101f7578063f366751714610215578063fe84d0ae14610233576100b4565b806305180237146100b95780631c9c7903146100d757806324a5af31146100f35780632f10b47a1461010f578063578ec33f1461012b5780636075851e14610149575b600080fd5b6100c1610251565b6040516100ce9190610908565b60405180910390f35b6100f160048036038101906100ec91906109b2565b610257565b005b61010d60048036038101906101089190610a05565b61038b565b005b61012960048036038101906101249190610a45565b6105b8565b005b610133610688565b6040516101409190610a94565b60405180910390f35b6101516106ae565b60405161015e9190610a94565b60405180910390f35b610181600480360381019061017c9190610aaf565b6106d4565b60405161018e9190610908565b60405180910390f35b6101b160048036038101906101ac9190610adc565b610766565b6040516101be9190610908565b60405180910390f35b6101e160048036038101906101dc9190610adc565b6107e7565b6040516101ee9190610908565b60405180910390f35b6101ff6108ad565b60405161020c9190610908565b60405180910390f35b61021d6108b7565b60405161022a9190610a94565b60405180910390f35b61023b6108e1565b6040516102489190610908565b60405180910390f35b60005481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166102986108e7565b73ffffffffffffffffffffffffffffffffffffffff16146102b857600080fd5b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd3084846040518463ffffffff1660e01b81526004016102f593929190610b09565b602060405180830381600087803b15801561030f57600080fd5b505af1158015610323573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103479190610b78565b610386576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037d90610c02565b60405180910390fd5b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166103cc6108e7565b73ffffffffffffffffffffffffffffffffffffffff16146103ec57600080fd5b60008290508073ffffffffffffffffffffffffffffffffffffffff166323b872dd306104166108e7565b856040518463ffffffff1660e01b815260040161043593929190610b09565b602060405180830381600087803b15801561044f57600080fd5b505af1158015610463573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104879190610b78565b506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b7482646000546040518263ffffffff1660e01b81526004016104e79190610908565b60206040518083038186803b1580156104ff57600080fd5b505afa158015610513573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105379190610b78565b905080610579576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057090610c94565b60405180910390fd5b7f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436484846040516105aa929190610cb4565b60405180910390a150505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166105f96108e7565b73ffffffffffffffffffffffffffffffffffffffff161461061957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16635c19a95c836040518263ffffffff1660e01b81526004016106529190610a94565b600060405180830381600087803b15801561066c57600080fd5b505af1158015610680573d6000803e3d6000fd5b505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161070f9190610a94565b60206040518083038186803b15801561072757600080fd5b505afa15801561073b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075f9190610cf2565b9050919050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166107a96108e7565b73ffffffffffffffffffffffffffffffffffffffff16146107c957600080fd5b816006546107d79190610d4e565b6006819055506006549050919050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661082a6108e7565b73ffffffffffffffffffffffffffffffffffffffff161461084a57600080fd5b81600654101561088f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088690610df0565b60405180910390fd5b8160065461089d9190610e10565b6006819055506006549050919050565b6000600654905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60065481565b600033905090565b6000819050919050565b610902816108ef565b82525050565b600060208201905061091d60008301846108f9565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061095382610928565b9050919050565b61096381610948565b811461096e57600080fd5b50565b6000813590506109808161095a565b92915050565b61098f816108ef565b811461099a57600080fd5b50565b6000813590506109ac81610986565b92915050565b6000806000606084860312156109cb576109ca610923565b5b60006109d986828701610971565b93505060206109ea86828701610971565b92505060406109fb8682870161099d565b9150509250925092565b60008060408385031215610a1c57610a1b610923565b5b6000610a2a85828601610971565b9250506020610a3b8582860161099d565b9150509250929050565b60008060408385031215610a5c57610a5b610923565b5b6000610a6a85828601610971565b9250506020610a7b85828601610971565b9150509250929050565b610a8e81610948565b82525050565b6000602082019050610aa96000830184610a85565b92915050565b600060208284031215610ac557610ac4610923565b5b6000610ad384828501610971565b91505092915050565b600060208284031215610af257610af1610923565b5b6000610b008482850161099d565b91505092915050565b6000606082019050610b1e6000830186610a85565b610b2b6020830185610a85565b610b3860408301846108f9565b949350505050565b60008115159050919050565b610b5581610b40565b8114610b6057600080fd5b50565b600081519050610b7281610b4c565b92915050565b600060208284031215610b8e57610b8d610923565b5b6000610b9c84828501610b63565b91505092915050565b600082825260208201905092915050565b7f6d61737465725472616e736665723a205472616e73666572204661696c656400600082015250565b6000610bec601f83610ba5565b9150610bf782610bb6565b602082019050919050565b60006020820190508181036000830152610c1b81610bdf565b9050919050565b7f7468697320776974686472617720776f756c64206d616b6520796f757220616360008201527f636f756e7420696e736f6c76656e740000000000000000000000000000000000602082015250565b6000610c7e602f83610ba5565b9150610c8982610c22565b604082019050919050565b60006020820190508181036000830152610cad81610c71565b9050919050565b6000604082019050610cc96000830185610a85565b610cd660208301846108f9565b9392505050565b600081519050610cec81610986565b92915050565b600060208284031215610d0857610d07610923565b5b6000610d1684828501610cdd565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d59826108ef565b9150610d64836108ef565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d9957610d98610d1f565b5b828201905092915050565b7f63616e6e6f74207265706179206d6f7265207468616e206973206f7765640000600082015250565b6000610dda601e83610ba5565b9150610de582610da4565b602082019050919050565b60006020820190508181036000830152610e0981610dcd565b9050919050565b6000610e1b826108ef565b9150610e26836108ef565b925082821015610e3957610e38610d1f565b5b82820390509291505056fea26469706673582212203780e708802bb8910be33804ce9db5cd88f2159b65cb6e9db0ee26156b79b24464736f6c63430008090033";

type VaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Vault__factory extends ContractFactory {
  constructor(...args: VaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    id: BigNumberish,
    minter: string,
    master_address: string,
    usdi_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Vault> {
    return super.deploy(
      id,
      minter,
      master_address,
      usdi_address,
      overrides || {}
    ) as Promise<Vault>;
  }
  override getDeployTransaction(
    id: BigNumberish,
    minter: string,
    master_address: string,
    usdi_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      id,
      minter,
      master_address,
      usdi_address,
      overrides || {}
    );
  }
  override attach(address: string): Vault {
    return super.attach(address) as Vault;
  }
  override connect(signer: Signer): Vault__factory {
    return super.connect(signer) as Vault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VaultInterface {
    return new utils.Interface(_abi) as VaultInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Vault {
    return new Contract(address, _abi, signerOrProvider) as Vault;
  }
}
