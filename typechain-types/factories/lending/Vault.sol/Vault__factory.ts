/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Vault, VaultInterface } from "../../../lending/Vault.sol/Vault";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "minter",
        type: "address",
      },
      {
        internalType: "address",
        name: "master_address",
        type: "address",
      },
      {
        internalType: "address",
        name: "usdi_address",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "_baseLiability",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_id",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_masterAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_minter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token_address",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "claim_erc20",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "base_amount",
        type: "uint256",
      },
    ],
    name: "decrease_liability",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "compLikeDelegatee",
        type: "address",
      },
      {
        internalType: "address",
        name: "CompLikeToken",
        type: "address",
      },
    ],
    name: "delegate_Comp_Like_To",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token_address",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit_erc20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBaseLiability",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMinter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "base_amount",
        type: "uint256",
      },
    ],
    name: "increase_liability",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "masterTransfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token_address",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw_erc20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200177938038062001779833981810160405281019062000037919062000232565b8360008190555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050620002a4565b600080fd5b6000819050919050565b620001a78162000192565b8114620001b357600080fd5b50565b600081519050620001c7816200019c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001fa82620001cd565b9050919050565b6200020c81620001ed565b81146200021857600080fd5b50565b6000815190506200022c8162000201565b92915050565b600080600080608085870312156200024f576200024e6200018d565b5b60006200025f87828801620001b6565b945050602062000272878288016200021b565b935050604062000285878288016200021b565b925050606062000298878288016200021b565b91505092959194509250565b6114c580620002b46000396000f3fe608060405234801561001057600080fd5b50600436106100e95760003560e01c80636075851e1161008c578063da7eeea511610066578063da7eeea514610236578063dafb27b614610266578063f366751714610296578063fe84d0ae146102b4576100e9565b80636075851e146101cc578063c84aae17146101ea578063d16544f01461021a576100e9565b80631c9c7903116100c85780631c9c79031461014657806324a5af3114610162578063578ec33f1461017e57806359962b651461019c576100e9565b80629fd1d6146100ee578063051802371461010c578063128a84401461012a575b600080fd5b6100f66102d2565b6040516101039190610ec0565b60405180910390f35b6101146102dc565b6040516101219190610ec0565b60405180910390f35b610144600480360381019061013f9190610f3e565b6102e2565b005b610160600480360381019061015b9190610faa565b6103ab565b005b61017c60048036038101906101779190610ffd565b6104d8565b005b6101866107cd565b604051610193919061104c565b60405180910390f35b6101b660048036038101906101b19190610ffd565b6107f3565b6040516101c39190610ec0565b60405180910390f35b6101d4610b64565b6040516101e1919061104c565b60405180910390f35b61020460048036038101906101ff9190611067565b610b8a565b6040516102119190610ec0565b60405180910390f35b610234600480360381019061022f9190610ffd565b610bd3565b005b610250600480360381019061024b9190611094565b610d3e565b60405161025d9190610ec0565b60405180910390f35b610280600480360381019061027b9190611094565b610db8565b60405161028d9190610ec0565b60405180910390f35b61029e610e77565b6040516102ab919061104c565b60405180910390f35b6102bc610ea1565b6040516102c99190610ec0565b60405180910390f35b6000600754905090565b60005481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461033c57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16635c19a95c836040518263ffffffff1660e01b8152600401610375919061104c565b600060405180830381600087803b15801561038f57600080fd5b505af11580156103a3573d6000803e3d6000fd5b505050505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461040557600080fd5b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd3084846040518463ffffffff1660e01b8152600401610442939291906110c1565b602060405180830381600087803b15801561045c57600080fd5b505af1158015610470573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104949190611130565b6104d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ca906111ba565b60405180910390fd5b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461053257600080fd5b80600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116105b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105aa9061124c565b60405180910390fd5b60008290508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3033856040518463ffffffff1660e01b81526004016105f5939291906110c1565b602060405180830381600087803b15801561060f57600080fd5b505af1158015610623573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106479190611130565b5081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610693919061129b565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b7482646000546040518263ffffffff1660e01b81526004016107359190610ec0565b60206040518083038186803b15801561074d57600080fd5b505afa158015610761573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107859190611130565b9050806107c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107be90611341565b60405180910390fd5b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461084f57600080fd5b600083905082600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411156109e4578073ffffffffffffffffffffffffffffffffffffffff166323b872dd30600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16866040518463ffffffff1660e01b81526004016108fa939291906110c1565b602060405180830381600087803b15801561091457600080fd5b505af1158015610928573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094c9190611130565b5082600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610998919061129b565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082915050610b5e565b8073ffffffffffffffffffffffffffffffffffffffff166323b872dd30600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518463ffffffff1660e01b8152600401610a82939291906110c1565b602060405180830381600087803b158015610a9c57600080fd5b505af1158015610ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad49190611130565b506000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549150505b92915050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008111610c16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0d906113ad565b60405180910390fd5b60008290508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401610c58939291906110c1565b602060405180830381600087803b158015610c7257600080fd5b505af1158015610c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610caa9190611130565b5081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610cf691906113cd565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d9a57600080fd5b81600754610da891906113cd565b6007819055506007549050919050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e1457600080fd5b816007541015610e59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e509061146f565b60405180910390fd5b81600754610e67919061129b565b6007819055506007549050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60075481565b6000819050919050565b610eba81610ea7565b82525050565b6000602082019050610ed56000830184610eb1565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f0b82610ee0565b9050919050565b610f1b81610f00565b8114610f2657600080fd5b50565b600081359050610f3881610f12565b92915050565b60008060408385031215610f5557610f54610edb565b5b6000610f6385828601610f29565b9250506020610f7485828601610f29565b9150509250929050565b610f8781610ea7565b8114610f9257600080fd5b50565b600081359050610fa481610f7e565b92915050565b600080600060608486031215610fc357610fc2610edb565b5b6000610fd186828701610f29565b9350506020610fe286828701610f29565b9250506040610ff386828701610f95565b9150509250925092565b6000806040838503121561101457611013610edb565b5b600061102285828601610f29565b925050602061103385828601610f95565b9150509250929050565b61104681610f00565b82525050565b6000602082019050611061600083018461103d565b92915050565b60006020828403121561107d5761107c610edb565b5b600061108b84828501610f29565b91505092915050565b6000602082840312156110aa576110a9610edb565b5b60006110b884828501610f95565b91505092915050565b60006060820190506110d6600083018661103d565b6110e3602083018561103d565b6110f06040830184610eb1565b949350505050565b60008115159050919050565b61110d816110f8565b811461111857600080fd5b50565b60008151905061112a81611104565b92915050565b60006020828403121561114657611145610edb565b5b60006111548482850161111b565b91505092915050565b600082825260208201905092915050565b7f6d61737465725472616e736665723a205472616e73666572204661696c656400600082015250565b60006111a4601f8361115d565b91506111af8261116e565b602082019050919050565b600060208201905081810360008301526111d381611197565b9050919050565b7f63616e6e6f74207769746864726177206d6f7265207468616e20796f75206f7760008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b600061123660218361115d565b9150611241826111da565b604082019050919050565b6000602082019050818103600083015261126581611229565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006112a682610ea7565b91506112b183610ea7565b9250828210156112c4576112c361126c565b5b828203905092915050565b7f7468697320776974686472617720776f756c64206d616b6520796f757220616360008201527f636f756e7420696e736f6c76656e740000000000000000000000000000000000602082015250565b600061132b602f8361115d565b9150611336826112cf565b604082019050919050565b6000602082019050818103600083015261135a8161131e565b9050919050565b7f63616e6e6f74206465706f736974203000000000000000000000000000000000600082015250565b600061139760108361115d565b91506113a282611361565b602082019050919050565b600060208201905081810360008301526113c68161138a565b9050919050565b60006113d882610ea7565b91506113e383610ea7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156114185761141761126c565b5b828201905092915050565b7f63616e6e6f74207265706179206d6f7265207468616e206973206f7765640000600082015250565b6000611459601e8361115d565b915061146482611423565b602082019050919050565b600060208201905081810360008301526114888161144c565b905091905056fea26469706673582212204fb067308f68d37034c475ac1530c138059bdf96969fee1f3c033281d4e8681164736f6c63430008090033";

type VaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Vault__factory extends ContractFactory {
  constructor(...args: VaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    id: BigNumberish,
    minter: string,
    master_address: string,
    usdi_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Vault> {
    return super.deploy(
      id,
      minter,
      master_address,
      usdi_address,
      overrides || {}
    ) as Promise<Vault>;
  }
  override getDeployTransaction(
    id: BigNumberish,
    minter: string,
    master_address: string,
    usdi_address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      id,
      minter,
      master_address,
      usdi_address,
      overrides || {}
    );
  }
  override attach(address: string): Vault {
    return super.attach(address) as Vault;
  }
  override connect(signer: Signer): Vault__factory {
    return super.connect(signer) as Vault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VaultInterface {
    return new utils.Interface(_abi) as VaultInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Vault {
    return new Contract(address, _abi, signerOrProvider) as Vault;
  }
}
